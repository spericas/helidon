name: "Validate"

on: [pull_request, push]

env:
  JAVA_VERSION: '20'
  JAVA_DISTRO: 'temurin'
  HELIDON_PIPELINES: 'true'
  MAVEN_HTTP_ARGS: '-Dmaven.wagon.httpconnectionManager.ttlSeconds=60 -Dmaven.wagon.http.retryHandler.count=3'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  copyright:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    steps:
     - uses: actions/checkout@v3
       with:
         fetch-depth: 0
     - name: Set up JDK ${{ env.JAVA_VERSION }}
       uses: actions/setup-java@v3.6.0
       with:
         distribution: ${{ env.JAVA_DISTRO }}
         java-version: ${{ env.JAVA_VERSION }}
         cache: maven
     - name: Copyright
       run: etc/scripts/copyright.sh
  checkstyle:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3.6.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Checkstyle
        run: etc/scripts/checkstyle.sh
  spotbugs:
    timeout-minutes: 45
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3.6.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Spotbugs
        run: etc/scripts/spotbugs.sh
  docs:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3.6.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Docs
        run: etc/scripts/site.sh
  build:
    timeout-minutes: 100
    strategy:
      matrix:
        os: [ windows-2022 ]
        include:
          - os: windows-2022
            build_script: etc/scripts/github-build.bat
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3.6.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Maven compile
        run: etc/scripts/github-compile.bat
      - name: Maven build
        run: ${{ matrix.build_script }}
      - name: Archive test results
        uses: actions/upload-artifact@v3.1.2
        if: always()
        with:
         name: test-results
         path: |
           **/target/**/*.java
           **/target/**/*.java.pico
           **/target/pico/*.txt
  examples:
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ ubuntu-20.04, windows-2022 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3.6.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Maven build
        run: |
          mvn -B -e "-Dmaven.test.skip=true" $MAVEN_HTTP_ARGS -DskipTests -Ppipeline install
          cd examples
          mvn -B verify
  mp-tck:
    timeout-minutes: 60
    name: "MicroProfile TCKs"
    strategy:
      matrix:
        os: [ ubuntu-20.04, windows-2022 ]
        include:
          - os: ubuntu-20.04
            mp-tck: etc/scripts/mp-tck.sh
          - os: windows-2022
            mp-tck: etc/scripts/mp-tck.bat
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3.6.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Maven build
        run: ${{ matrix.mp-tck }}
  archetypes:
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ ubuntu-20.04, windows-2022 ]
        include:
          - os: ubuntu-20.04
            test-archetypes: etc/scripts/test-archetypes.sh
          - os: windows-2022
            test-archetypes: etc/scripts/test-archetypes.bat
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3.6.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Test Archetypes
        run: ${{ matrix.test-archetypes }}
  packaging:
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3.6.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Build Helidon
        run: etc/scripts/github-compile.sh
      - name: JAR packaging
        run: etc/scripts/test-packaging-jar.sh
      - name: JLink packaging
        run: etc/scripts/test-packaging-jlink.sh
